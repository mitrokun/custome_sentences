#Contextual satellite volume control (for esphome devices). Need to unify media player entity names
alias: Voice-sat-volume
description: ""
triggers:
  - trigger: conversation
    command:
      - громкость спутника на {vlm}
    id: set
  - trigger: conversation
    command:
      - повысь громкость спутника
    id: up
  - trigger: conversation
    command:
      - "понизь громкость спутника "
    id: down
conditions: []
actions:
  - choose:
      - conditions:
          - condition: trigger
            id:
              - set
        sequence:
          - action: media_player.volume_set
            metadata: {}
            data:
              volume_level: >-
                {% set number_map = {
                  "пять": 5,
                  "десять": 10,
                  "пятнадцать": 15,
                  "двадцать": 20,
                  "двадцать пять": 25,
                  "тридцать": 30,
                  "тридцать пять": 35,
                  "сорок": 40,
                  "сорок пять": 45,
                  "пятьдесят": 50,
                  "пятьдесят пять": 55,
                  "шестьдесят": 60,
                  "шестьдесят пять": 65,
                  "семьдесят": 70,
                  "семьдесят пять": 75,
                  "восемьдесят": 80,
                  "восемьдесят пять": 85,
                  "девяносто": 90,
                  "девяносто пять": 95,
                  "сто": 100
                } %}
                {% set vlm_input = trigger.slots.vlm | string %}
                {% if vlm_input in number_map %}
                  {{ number_map[vlm_input] / 100 }}
                {% else %}
                  {{ vlm_input | int(0) / 100 }}
                {% endif %}
            target:
              entity_id: >-
                {{ 'media_player.'~device_attr(trigger.device_id, 'name')| lower
                }}
            enabled: true
          - delay:
              hours: 0
              minutes: 0
              seconds: 1
              milliseconds: 0
          - set_conversation_response: Установил
            enabled: true
      - conditions:
          - condition: trigger
            id:
              - up
        sequence:
          - action: media_player.volume_set
            metadata: {}
            data:
              volume_level: >-
                {{state_attr('media_player.'~device_attr(trigger.device_id,
                'name')| lower,'volume_level') + 0.1}}
            target:
              entity_id: >-
                {{ 'media_player.'~device_attr(trigger.device_id, 'name')| lower
                }}
            enabled: true
          - delay:
              hours: 0
              minutes: 0
              seconds: 1
              milliseconds: 0
          - set_conversation_response: Повысил
            enabled: true
      - conditions:
          - condition: trigger
            id:
              - down
        sequence:
          - action: media_player.volume_set
            metadata: {}
            data:
              volume_level: >-
                {{ state_attr('media_player.'~device_attr(trigger.device_id,
                'name')| lower,'volume_level') - 0.1 }}
            target:
              entity_id: >-
                {{ 'media_player.'~device_attr(trigger.device_id, 'name')| lower
                }}
            enabled: true
          - delay:
              hours: 0
              minutes: 0
              seconds: 1
              milliseconds: 0
          - set_conversation_response: Понизил
            enabled: true
mode: single

#Turning on the main light in the room(using a label)
alias: light_HassTurnOn_main
description: ""
triggers:
  - trigger: conversation
    command:
      - Включи свет
conditions: []
actions:
  - if:
      - condition: template
        value_template: >-
          {{ (states.light |selectattr('entity_id', 'in',
          label_entities('mainlight'))|selectattr('entity_id', 'in',
          area_entities(area_id(trigger.device_id))) |map(attribute='entity_id')
          |list |count) > 0}}
    then:
      - action: light.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: >-
            {{ states.light |selectattr('entity_id', 'in',
            label_entities('mainlight'))|selectattr('entity_id', 'in',
            area_entities(area_id(trigger.device_id)))
            |map(attribute='entity_id') |list }}
    else:
      - action: light.turn_on
        metadata: {}
        data: {}
        target:
          area_id: "{{ area_id(trigger.device_id) }}"
  - set_conversation_response: Включил
mode: single

#Processing the promt with the conversation that is assigned to the assistant. The name of the assist pipeline and the conversation must be the same.
#The initial data is extracted using a python script that parses the site and writes the values to the news15 variable.
alias: voice-news2
description: ""
triggers:
  - trigger: conversation
    command: Какие новости
conditions: []
actions:
  - action: shell_command.update_news
    metadata: {}
    data: {}
    response_variable: news15
  - action: conversation.process
    metadata: {}
    data:
      agent_id: >-
        {% set agent = states.conversation |
        selectattr('attributes.friendly_name','search',
        states('select.'~device_attr(trigger.device_id, "name")~'_assistant'))|
        map(attribute='entity_id')| first %} {{ agent if agent is defined else
        "conversation.openaicompatible"}}
      text: >-
        {{news15.stdout}}. Изучи эти новости и скомпонуй короткий пересказ,
        объединив связанные события.
    response_variable: news
  - set_conversation_response: "{{ news.response.speech.plain.speech }}"
mode: single


#shell_command:
#  update_news: python3 /config/scripts/update_news.py
---
#!/usr/bin/env python3
import requests
from bs4 import BeautifulSoup

def get_latest_news(url):
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        response.encoding = response.apparent_encoding
        soup = BeautifulSoup(response.text, 'html.parser')
        news_items = soup.select('dd > a')[:15]
        news = [{'text': item.get_text(strip=True), 'link': item['href']} for item in news_items]

        return news

    except requests.RequestException as e:
        print(f"Ошибка при выполнении запроса: {e}")
        return []

url = 'https://www.ng.ru/news/'
latest_news = get_latest_news(url)

news_strings = [news_item['text'] for news_item in latest_news]
news_string = ".\n".join(news_strings)
print(news_string)
---


